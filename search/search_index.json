{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HoloShed The unshackled Steam Deck OS--because the only person shooting you in the foot should be you. What is HoloShed? HoloShed is a project to create my own personal Linux distribution for the Valve Steam Deck and similar cyberdecks , absolutely incredible handheld devices with the power of laptops twice their price in form factors you can stick into a coat pocket or use while standing on a crowded train. I'm told they play games. What's wrong with SteamOS? The Steam Deck is an omni-console \u2014it is first and foremost a device for playing games. All games. From DOS and NES retro classics to modern AAA titles, from games designed for consoles to PC strategy games. The Steam Deck has the power (and the input methods) to play them all. All that is due in equal parts to the hardware and the software, by which I mean SteamOS, a dedicated gaming OS that is way more than the sum of its open source parts. To their credit, Valve did what many thought unthinkable--they built a GNU/Linux distribution where someone who knows nothing about computers can have it just work . And work for more than checking emails or training recurrent neural networks: in my experience, 90% of the things I've tried to do with the Deck work for 99% of the time. And amazingly, this is still while providing us tinkerers and hackers with total and complete control over the software. The problem (\"problem\") is that, as flexible and capable as SteamOS is, and even with tools like like Rwfus around to help get around the immutable file system, SteamOS is a very opinionated language, and for people like me who have strong opinions of their own, there are going to be things about SteamOS that we find infuriating. A short list of my grievances: The default kernel is positively ancient. Of course it's a lot of work writing kernel patches for custom hardware, especially given the level to which Valve has optimized performance per Watt to squeeze every minute of battery life out of every game preset, but there are plenty of non-APU changes in the Linux kernel (like NTFS suppport for people who dual boot or Fn-key support for those of us with Keychron keebs) that are frustratingly just sitting in the Beta channel, wgich takes me to the fact that: SteamOS upgrades are all-or-nothing. I can't choose to upgrade my kernel while keeping my MESA drivers on the stable branch. Granted, with Rwfus I probably could, and partial upgrades are a big no-no anyway, but darn it! I shouldn't have to jump through hoops to shoot myself in the leg! Desktop mode should not be separate from gaming mode. And multitasking should not be something that feels less natural on the Deck than it does on my phone, which at least has picture-in-picture. KDE Plasma is pants. If I had liked the look and feel of Windows XP, I wouldn't have wiped it from my laptop in 2006 favor of Ubuntu (Dapper Drake!) So why not Windows? Because at this point in my life, I want an operating system that just works . No seriously: I cannot understand at this point how people are willing to spend hours fighting with Windows Update when it cripples their expensive new processor or recover from BSODs when a graphics driver update goes horribly wrong, and yet when a tutorial tells them to open a terminal and type a command as transparently clear as package-manager install the-thing they nope right out. In all seriousness, I get that people are used to what they're used to, but as someone who hasn't used Windows regularly since 2006, there is very little that could get me to use Redmond's Finest. Why not ChimeraOS? Or Nobara? Or Hannah Montana Linux? All fine choices. But whenever I put on my finest kneesocks and head to a Linux emnthusiast shindig, I always feel self-conscious and like less of a nerd knowing that I've never rolled my own OS. So what's going to be different about HoloShed? In short, when it's done, it's going to be mine . If nothing else, it'll be something I made to make me happy. But I guess specifically: It's going to be geared towards handheld cyberdecks with lots of buttons like the Steam Deck and Win4. You'll be able to use it for gaming and poinmt & click applications without pulling up or folding out the keyboard. No separation of desktop mode and gaming mode. One version will definitely be X11-based using the Pantheon desktop environment (from elementaryOS ). I'd also like to make a version with a tiling window manager like i3, sway or hyprland , depending on which works best for gaming. All data will be on a separate partition from the OS (though everything will still be mutable), with /home living on the root partition and making gratuitous use of symlinks. The idea is to make distro-hopping and dual booting super easy. It'll ship with the most up-to-date kernel and all the custom tweaks needed to manage power profiles. It's going to give the user direct access to the file system and package manager, with all the footguns fully loaded ... but it will also set up Timeshift for you to help dig out those bullet fragments It's almost certainly going to be Arch-based, with flatpak and Steam pre-installed. Graphical interactive installer (mainly because I want to learn how to make one) Is HoloShed for Me? No. Seriously? Yeah, this project is a creative outlet for me and a chance for me to learn more about how Linux distributions work. There is an approximately 0% chance that I end up with a system that I like better than what I have now with SteamOS + Rwfus and sway launchable from gaming mode. There might be value in looking at my process, but even there I'm guessing the nature of that value will be less educational than entertainment at the many ways I mess things up. Even if I get everything working, a system with: my particular choice of desktop environment my particular configurations and customizations ( alias cat='lolcat' ) my particular bundled applications and development stacks is designed to appeal to exactly one person: me. What's with the name? SteamOS is referred to by Valve as \"HoloOS.\" Holo OS on the Steam Deck. \ud83e\udd14 Holo Deck. Lest you ever doubt that the folks working for Gabe Newell are complete and total dorks (and I love them for it \u2665\ufe0f). In any case, if I'm going to make an off-brand version of a HoloDeck there's no need to reinvent the wheel when it comes to naming. Or, to save you the click: Kif : This is the holoshed. It can simulate anything you desire, and nothing can hurt you. Except when it malfunctions and the holograms become real. Amy : Well, that probably won't happen this time.","title":"Home"},{"location":"#holoshed","text":"The unshackled Steam Deck OS--because the only person shooting you in the foot should be you.","title":"HoloShed"},{"location":"#what-is-holoshed","text":"HoloShed is a project to create my own personal Linux distribution for the Valve Steam Deck and similar cyberdecks , absolutely incredible handheld devices with the power of laptops twice their price in form factors you can stick into a coat pocket or use while standing on a crowded train. I'm told they play games.","title":"What is HoloShed?"},{"location":"#whats-wrong-with-steamos","text":"The Steam Deck is an omni-console \u2014it is first and foremost a device for playing games. All games. From DOS and NES retro classics to modern AAA titles, from games designed for consoles to PC strategy games. The Steam Deck has the power (and the input methods) to play them all. All that is due in equal parts to the hardware and the software, by which I mean SteamOS, a dedicated gaming OS that is way more than the sum of its open source parts. To their credit, Valve did what many thought unthinkable--they built a GNU/Linux distribution where someone who knows nothing about computers can have it just work . And work for more than checking emails or training recurrent neural networks: in my experience, 90% of the things I've tried to do with the Deck work for 99% of the time. And amazingly, this is still while providing us tinkerers and hackers with total and complete control over the software. The problem (\"problem\") is that, as flexible and capable as SteamOS is, and even with tools like like Rwfus around to help get around the immutable file system, SteamOS is a very opinionated language, and for people like me who have strong opinions of their own, there are going to be things about SteamOS that we find infuriating. A short list of my grievances: The default kernel is positively ancient. Of course it's a lot of work writing kernel patches for custom hardware, especially given the level to which Valve has optimized performance per Watt to squeeze every minute of battery life out of every game preset, but there are plenty of non-APU changes in the Linux kernel (like NTFS suppport for people who dual boot or Fn-key support for those of us with Keychron keebs) that are frustratingly just sitting in the Beta channel, wgich takes me to the fact that: SteamOS upgrades are all-or-nothing. I can't choose to upgrade my kernel while keeping my MESA drivers on the stable branch. Granted, with Rwfus I probably could, and partial upgrades are a big no-no anyway, but darn it! I shouldn't have to jump through hoops to shoot myself in the leg! Desktop mode should not be separate from gaming mode. And multitasking should not be something that feels less natural on the Deck than it does on my phone, which at least has picture-in-picture. KDE Plasma is pants. If I had liked the look and feel of Windows XP, I wouldn't have wiped it from my laptop in 2006 favor of Ubuntu (Dapper Drake!)","title":"What's wrong with SteamOS?"},{"location":"#so-why-not-windows","text":"Because at this point in my life, I want an operating system that just works . No seriously: I cannot understand at this point how people are willing to spend hours fighting with Windows Update when it cripples their expensive new processor or recover from BSODs when a graphics driver update goes horribly wrong, and yet when a tutorial tells them to open a terminal and type a command as transparently clear as package-manager install the-thing they nope right out. In all seriousness, I get that people are used to what they're used to, but as someone who hasn't used Windows regularly since 2006, there is very little that could get me to use Redmond's Finest.","title":"So why not Windows?"},{"location":"#why-not-chimeraos-or-nobara-or-hannah-montana-linux","text":"All fine choices. But whenever I put on my finest kneesocks and head to a Linux emnthusiast shindig, I always feel self-conscious and like less of a nerd knowing that I've never rolled my own OS.","title":"Why not ChimeraOS? Or Nobara? Or Hannah Montana Linux?"},{"location":"#so-whats-going-to-be-different-about-holoshed","text":"In short, when it's done, it's going to be mine . If nothing else, it'll be something I made to make me happy. But I guess specifically: It's going to be geared towards handheld cyberdecks with lots of buttons like the Steam Deck and Win4. You'll be able to use it for gaming and poinmt & click applications without pulling up or folding out the keyboard. No separation of desktop mode and gaming mode. One version will definitely be X11-based using the Pantheon desktop environment (from elementaryOS ). I'd also like to make a version with a tiling window manager like i3, sway or hyprland , depending on which works best for gaming. All data will be on a separate partition from the OS (though everything will still be mutable), with /home living on the root partition and making gratuitous use of symlinks. The idea is to make distro-hopping and dual booting super easy. It'll ship with the most up-to-date kernel and all the custom tweaks needed to manage power profiles. It's going to give the user direct access to the file system and package manager, with all the footguns fully loaded ... but it will also set up Timeshift for you to help dig out those bullet fragments It's almost certainly going to be Arch-based, with flatpak and Steam pre-installed. Graphical interactive installer (mainly because I want to learn how to make one)","title":"So what's going to be different about HoloShed?"},{"location":"#is-holoshed-for-me","text":"No.","title":"Is HoloShed for Me?"},{"location":"#seriously","text":"Yeah, this project is a creative outlet for me and a chance for me to learn more about how Linux distributions work. There is an approximately 0% chance that I end up with a system that I like better than what I have now with SteamOS + Rwfus and sway launchable from gaming mode. There might be value in looking at my process, but even there I'm guessing the nature of that value will be less educational than entertainment at the many ways I mess things up. Even if I get everything working, a system with: my particular choice of desktop environment my particular configurations and customizations ( alias cat='lolcat' ) my particular bundled applications and development stacks is designed to appeal to exactly one person: me.","title":"Seriously?"},{"location":"#whats-with-the-name","text":"SteamOS is referred to by Valve as \"HoloOS.\" Holo OS on the Steam Deck. \ud83e\udd14 Holo Deck. Lest you ever doubt that the folks working for Gabe Newell are complete and total dorks (and I love them for it \u2665\ufe0f). In any case, if I'm going to make an off-brand version of a HoloDeck there's no need to reinvent the wheel when it comes to naming. Or, to save you the click: Kif : This is the holoshed. It can simulate anything you desire, and nothing can hurt you. Except when it malfunctions and the holograms become real. Amy : Well, that probably won't happen this time.","title":"What's with the name?"},{"location":"manual-install-guide/","text":"Manual Installation In a VM, at least Create your VM I'm using KVM / QEMU / VirtManager, but you do you. Set up your virtual machine with Steam Deck specs: 64GB of disk space 16GB of RAM 8 CPUs (4 cores, 2 threads per core) For initial setup, I'm using a Virtio display and Spice server. You could also do GPU pass-through. Make sure you're using UEFI for boot, not BIOS Partition your Disk You can do this as part of the Arch install, but I'm a lot more comfy doing it graphically with GParted Download the SystemRescue ISO Load it into the VM as a virtual CD Set it to the top of the boot order Power on and boot Open GParted and use the following partitioning layout: | Label | File System | Size | | -------| ----------- | ----- | | boot | FAT32 | 512MB | | swap | linux-swap | 16GB | | root | ext4 | 16GB | | home | ext4 | 8GB | | main | ext4 | (remainder) | Apply, close and power off Install Arch Download the Arch installation ISO Load it into the VM as a virtual CD Make sure it's still the top of the boot order Power on and boot Follow the Arch install guide - If you followed the above section, you can skip partitioning & formatting - Mount the partitions. If you followed the layout of the above section, then it should be self-explanatory what to mount where. The main partition should be /main - Install the packages listed in pacstrap.conf - Don't reboot when done arch-chroot into your system useradd your account, adding yourself to wheel visudo to add wheel group to sudoers su into yourself, disable root login chown -R /main so that you own it. Set up your home folders to symlink to folders in /main cd to ~/Workspace ( /main/Workspace ) and install paru Install additional packages through paru (including greetd) Configure greetd Logout, exit chroot, reboot Findings This experience was pretty horrible--Sway suffers due to a known kernel limitation that prevents the cursor from working correctly in a guest OS. Vulkan did not work through Spice (which, tbf, says acceleration is through OpenGL), and everything was just a buggy mess. And I haven't even started exploring virtual keyboards and X-input mapping.","title":"Manual Installation"},{"location":"manual-install-guide/#manual-installation","text":"In a VM, at least","title":"Manual Installation"},{"location":"manual-install-guide/#create-your-vm","text":"I'm using KVM / QEMU / VirtManager, but you do you. Set up your virtual machine with Steam Deck specs: 64GB of disk space 16GB of RAM 8 CPUs (4 cores, 2 threads per core) For initial setup, I'm using a Virtio display and Spice server. You could also do GPU pass-through. Make sure you're using UEFI for boot, not BIOS","title":"Create your VM"},{"location":"manual-install-guide/#partition-your-disk","text":"You can do this as part of the Arch install, but I'm a lot more comfy doing it graphically with GParted Download the SystemRescue ISO Load it into the VM as a virtual CD Set it to the top of the boot order Power on and boot Open GParted and use the following partitioning layout: | Label | File System | Size | | -------| ----------- | ----- | | boot | FAT32 | 512MB | | swap | linux-swap | 16GB | | root | ext4 | 16GB | | home | ext4 | 8GB | | main | ext4 | (remainder) | Apply, close and power off","title":"Partition your Disk"},{"location":"manual-install-guide/#install-arch","text":"Download the Arch installation ISO Load it into the VM as a virtual CD Make sure it's still the top of the boot order Power on and boot Follow the Arch install guide - If you followed the above section, you can skip partitioning & formatting - Mount the partitions. If you followed the layout of the above section, then it should be self-explanatory what to mount where. The main partition should be /main - Install the packages listed in pacstrap.conf - Don't reboot when done arch-chroot into your system useradd your account, adding yourself to wheel visudo to add wheel group to sudoers su into yourself, disable root login chown -R /main so that you own it. Set up your home folders to symlink to folders in /main cd to ~/Workspace ( /main/Workspace ) and install paru Install additional packages through paru (including greetd) Configure greetd Logout, exit chroot, reboot","title":"Install Arch"},{"location":"manual-install-guide/#findings","text":"This experience was pretty horrible--Sway suffers due to a known kernel limitation that prevents the cursor from working correctly in a guest OS. Vulkan did not work through Spice (which, tbf, says acceleration is through OpenGL), and everything was just a buggy mess. And I haven't even started exploring virtual keyboards and X-input mapping.","title":"Findings"},{"location":"dev-diary/","text":"","title":"Dev Diary"},{"location":"dev-diary/01-to-make-a-linux/","text":"How to Make a Linux Distribution I am told that creating one's own Linux distribution is, in some circles, a rite of passage akin to building one's own JavaScript framework , yet even though I've been using Linux since 2006 ( ah, Dapper Drake \ud83e\udd86 ... ), it's not something that ever interested me. Even though I had a good understanding of the components of a distro (kernel, userspace, desktop environment, package manager...), it wasn't until I installed Arch for the first time that I realized just how much was involved in setting up a working desktop (that process also made me realize that Arch is just about my limit in terms of the lengths I'd go to customize my Linux experience, that is to say: in no way am I brave--or patient--enough to try Gentoo!). Now technically, once I got my Arch installation configured how I wanted it ( Pantheon desktop environment, most apps flatpak and configured with the latest AMD Vulkan and OpenCL software stacks) I could claim I had successfully built my own Linux distro. To wit--the way I'd set up my desktop was through trialing a bunch of setups and configurations in a VM, then exporting my package lists and configuration files to install onto a fresh system. Similarly, the most straightforward way of declaring victory with this HoloShed project would be to do the same: Set up a system in a VM, tweak with it and futz with it until I was ready to try it on the Deck Export the package lists and configuration files Run the Arch installer on the Deck, pacstrap all the packages I had listed, copy over my configuration files Validate that everything was working Post these steps, configuration files and package lists to reddit. Rake in the karma But that seemed like a cop-out. ChimeraOS , Endeavour and my beloved elementaryOS are more than just blog posts. Now, part of that is that each of those projects has developed their own apps for use on their distro, and (I think) each additionally maintain their own package repositories, but the more critical difference that makes these projects proper distros is that they each have guided installers. Enter Calamares \ud83d\udc19 When Googling \"How to make a Linux distribution,\" Calamares comes up pretty quick. It's the installer framework used by Endeavour, KaOS, Manjaro and even non-Arch distros like Lubuntu and Peppermint. While there are other installer frameworks out there, Calamares seemed like the best place to start. What is Calamares? Calamares provides a customizable graphical installer that you--the distro author--can customize so that a user can run that graphical installer and set up their Linux desktop exactly how you--again, the distro author--want it. It does this through an extendable collection of modules that a distro author can customize to their heart's content. What isn't Calamares? What took me far too long to grok was that Calamares does not create the entire LiveCD or installation ISO. It is just the GUI installer itself , and even after you're done configuring it, you still need to create your own installation medium. (I mean, you don't really --you could, say, build Calamares as an AppImage, run it from a full desktop , and install your distro to an external drive or, for the Deck explicitly, a microSD, but that's not the road I want to go down) Building a LiveCD, or, Making a Linux to Make Your Linux So I started this project with the intention of building my own Linux distribution. What I didn't realize is that I'd be making two . Luckily, there are plenty of tools for making bootable ISOs either from scratch or from an existing installation , so the only question now is whether to start with the chicken or the egg?","title":"How to Make a Linux Distribution"},{"location":"dev-diary/01-to-make-a-linux/#how-to-make-a-linux-distribution","text":"I am told that creating one's own Linux distribution is, in some circles, a rite of passage akin to building one's own JavaScript framework , yet even though I've been using Linux since 2006 ( ah, Dapper Drake \ud83e\udd86 ... ), it's not something that ever interested me. Even though I had a good understanding of the components of a distro (kernel, userspace, desktop environment, package manager...), it wasn't until I installed Arch for the first time that I realized just how much was involved in setting up a working desktop (that process also made me realize that Arch is just about my limit in terms of the lengths I'd go to customize my Linux experience, that is to say: in no way am I brave--or patient--enough to try Gentoo!). Now technically, once I got my Arch installation configured how I wanted it ( Pantheon desktop environment, most apps flatpak and configured with the latest AMD Vulkan and OpenCL software stacks) I could claim I had successfully built my own Linux distro. To wit--the way I'd set up my desktop was through trialing a bunch of setups and configurations in a VM, then exporting my package lists and configuration files to install onto a fresh system. Similarly, the most straightforward way of declaring victory with this HoloShed project would be to do the same: Set up a system in a VM, tweak with it and futz with it until I was ready to try it on the Deck Export the package lists and configuration files Run the Arch installer on the Deck, pacstrap all the packages I had listed, copy over my configuration files Validate that everything was working Post these steps, configuration files and package lists to reddit. Rake in the karma But that seemed like a cop-out. ChimeraOS , Endeavour and my beloved elementaryOS are more than just blog posts. Now, part of that is that each of those projects has developed their own apps for use on their distro, and (I think) each additionally maintain their own package repositories, but the more critical difference that makes these projects proper distros is that they each have guided installers.","title":"How to Make a Linux Distribution"},{"location":"dev-diary/01-to-make-a-linux/#enter-calamares","text":"When Googling \"How to make a Linux distribution,\" Calamares comes up pretty quick. It's the installer framework used by Endeavour, KaOS, Manjaro and even non-Arch distros like Lubuntu and Peppermint. While there are other installer frameworks out there, Calamares seemed like the best place to start.","title":"Enter Calamares \ud83d\udc19"},{"location":"dev-diary/01-to-make-a-linux/#what-is-calamares","text":"Calamares provides a customizable graphical installer that you--the distro author--can customize so that a user can run that graphical installer and set up their Linux desktop exactly how you--again, the distro author--want it. It does this through an extendable collection of modules that a distro author can customize to their heart's content.","title":"What is Calamares?"},{"location":"dev-diary/01-to-make-a-linux/#what-isnt-calamares","text":"What took me far too long to grok was that Calamares does not create the entire LiveCD or installation ISO. It is just the GUI installer itself , and even after you're done configuring it, you still need to create your own installation medium. (I mean, you don't really --you could, say, build Calamares as an AppImage, run it from a full desktop , and install your distro to an external drive or, for the Deck explicitly, a microSD, but that's not the road I want to go down)","title":"What isn't Calamares?"},{"location":"dev-diary/01-to-make-a-linux/#building-a-livecd-or-making-a-linux-to-make-your-linux","text":"So I started this project with the intention of building my own Linux distribution. What I didn't realize is that I'd be making two . Luckily, there are plenty of tools for making bootable ISOs either from scratch or from an existing installation , so the only question now is whether to start with the chicken or the egg?","title":"Building a LiveCD, or, Making a Linux to Make Your Linux"},{"location":"dev-diary/02-in-it-to-win-it/","text":"In It to Win It Aside from Pokemon and (since the Pandemic) Minecraft, I haven't really been into gaming since high school. But when I heard that some company called Spigot or something was selling a handheld cyberdeck with a respectable AMD APU and full non-Android Linux, I pulled out my wallet and begged them to \"shut up and take my money.\" I bought the Steam Deck because I've wanted a cyberdeck for decades. But once I actually had the Deck in my hands, I found myself facing a contradiction. Yeah, I installed a bunch of development environments and desktop software. I made a point of using the Deck as a full-on laptop replacement, and I proved it could be done . But at the end of the day, it was still a miserable experience, and the Deck proved to be an utter let-down as the cyberdeck I'd been dreaming of. Hence this project! which I actually made some decent progress on in a VM (and I'll write that up eventually) to the point that I was ready for a test deployment. But when I got out my thumb drive and got ready to burn the image... I hesitated. Second Thoughts I couldn't do it. I realized that with all the general-purpose computers in my life, SteamOS offered something nothing else did--the perfect distraction-free omni-console interface, that was so well optimized for playing games that I just couldn't bring myself to potentially mess that up. Because I do play video games now! I buy way too many video games during Steam sales. I read video game reviews and pre-order titles from my favorite publishers. I spend hours tweaking my Steam Input layout... and then I play through the games using it! And so, with that realization, I made some key decisions: I installed sway using Rwfus and added a Steam launcher for it so I could have a good multitasking WM available without having to log out Because I still do really want a cyberdeck, I bought a GPD Win 4 They had me at QWERTY I was in love with the win4 from the announcement on kickstarter. I didn't give a fig about the faster processor or the RGB bumpers, and the smaller form factor was a negative for me and my ogre hands. But as someomne who purchased keyboard phones exclusively, starting with the original Android G1 and sticking with it all the way through years trying to keep my Samsung Galaxy S Relay alive (God, what a turd that thing was), I saw that fold-out keyboard and started stretching to perform the mental gymnastics I'd need to justify owning one alongside my Steam Deck. Holo-Shed... For the Win? The thing is, I have zero intention of daily-driving for Microsol again, so when my Win4 boarded its flight leaving Hong Kong, I knew it was time to dust off my Holo-Shed notes. As of this writing, I've had my device for about a week and a half, and I'd say things are going decently well. Case in point: I wrote this entire post and deployed it to github, entirely on the device! I have hardware controls (via cpupower and ryzenadj working), and input-remapper is letting me just keep the controls in X-Input mode. I've even played some games, though my ogre paws definitely cramp up trying to use the controls (there's a grip attachment I'm 3D printing right now that'll hopefully help). So yes, Project Holo-Shed is still alive, and it's actually such a lovely experience I might actually go back and make a version for the Steam Deck after all! But first, I'm going to need to dig into mangohud configs...","title":"In It to Win It"},{"location":"dev-diary/02-in-it-to-win-it/#in-it-to-win-it","text":"Aside from Pokemon and (since the Pandemic) Minecraft, I haven't really been into gaming since high school. But when I heard that some company called Spigot or something was selling a handheld cyberdeck with a respectable AMD APU and full non-Android Linux, I pulled out my wallet and begged them to \"shut up and take my money.\" I bought the Steam Deck because I've wanted a cyberdeck for decades. But once I actually had the Deck in my hands, I found myself facing a contradiction. Yeah, I installed a bunch of development environments and desktop software. I made a point of using the Deck as a full-on laptop replacement, and I proved it could be done . But at the end of the day, it was still a miserable experience, and the Deck proved to be an utter let-down as the cyberdeck I'd been dreaming of. Hence this project! which I actually made some decent progress on in a VM (and I'll write that up eventually) to the point that I was ready for a test deployment. But when I got out my thumb drive and got ready to burn the image... I hesitated.","title":"In It to Win It"},{"location":"dev-diary/02-in-it-to-win-it/#second-thoughts","text":"I couldn't do it. I realized that with all the general-purpose computers in my life, SteamOS offered something nothing else did--the perfect distraction-free omni-console interface, that was so well optimized for playing games that I just couldn't bring myself to potentially mess that up. Because I do play video games now! I buy way too many video games during Steam sales. I read video game reviews and pre-order titles from my favorite publishers. I spend hours tweaking my Steam Input layout... and then I play through the games using it! And so, with that realization, I made some key decisions: I installed sway using Rwfus and added a Steam launcher for it so I could have a good multitasking WM available without having to log out Because I still do really want a cyberdeck, I bought a GPD Win 4","title":"Second Thoughts"},{"location":"dev-diary/02-in-it-to-win-it/#they-had-me-at-qwerty","text":"I was in love with the win4 from the announcement on kickstarter. I didn't give a fig about the faster processor or the RGB bumpers, and the smaller form factor was a negative for me and my ogre hands. But as someomne who purchased keyboard phones exclusively, starting with the original Android G1 and sticking with it all the way through years trying to keep my Samsung Galaxy S Relay alive (God, what a turd that thing was), I saw that fold-out keyboard and started stretching to perform the mental gymnastics I'd need to justify owning one alongside my Steam Deck.","title":"They had me at QWERTY"},{"location":"dev-diary/02-in-it-to-win-it/#holo-shed-for-the-win","text":"The thing is, I have zero intention of daily-driving for Microsol again, so when my Win4 boarded its flight leaving Hong Kong, I knew it was time to dust off my Holo-Shed notes. As of this writing, I've had my device for about a week and a half, and I'd say things are going decently well. Case in point: I wrote this entire post and deployed it to github, entirely on the device! I have hardware controls (via cpupower and ryzenadj working), and input-remapper is letting me just keep the controls in X-Input mode. I've even played some games, though my ogre paws definitely cramp up trying to use the controls (there's a grip attachment I'm 3D printing right now that'll hopefully help). So yes, Project Holo-Shed is still alive, and it's actually such a lovely experience I might actually go back and make a version for the Steam Deck after all! But first, I'm going to need to dig into mangohud configs...","title":"Holo-Shed... For the Win?"},{"location":"dev-diary/03-most-important-thing/","text":"A Font of Text Configurations Holo Shed OS for the Win4 is going remarkably well. Having a physical keyboard and a \"native\" landscape display has made the work of developing a bespoke Linux distro way easier than it would have been on the Steam Deck. Old Man Eyes Of course, Linuxing on the Win4 does have its downsides in the form of a 6\" FHD display that makes the text show up way too small out of the box, at least for my aging eyeballs. X11, GTK/GNOME and Pantheon do all theoretically support \"HiDPI\" modes and scaling, but those Three Stooges get in each other's way more often than not. Instead, the most reliable solution I've found is grabbing Dconf Editor and just searching for any setting for \"font\" or \"size.\" Having an interactive tool for this has been ace, by the way, since you can preview (and revert) settings extremwely quickly. Here's a list of everything I changed (conveniently grabbed from the CLI by running dconf dump / : [ca/desrt/dconf-editor] saved-pathbar-path='/org/gnome/gedit/plugins/externaltools/font' window-height=443 window-width=894 [desktop/ibus/panel] custom-font='Sans 14' ; will probably bump this higher [io/elementary/files/file-chooser] window-size=(892, 450) [io/elementary/files/preferences] sidebar-width=191 window-size=(1000, 680) [io/elementary/terminal/settings] font='Monospace 14' natural-copy-paste=false prefer-dark-style=true theme='dark' [org/gnome/desktop/interface] cursor-size=36 document-font-name='Open Sans 16' font-name='Inter 12' monospace-font-name='SourceCodeVF 16' scaling-factor=uint32 1 text-scaling-factor=1.0 [org/gnome/desktop/wm/preferences] titlebar-font='Cantarell Bold 18' [org/gnome/font-manager] compare-background-color='rgb(255,255,255)' compare-foreground-color='rgb(0,0,0)' compare-list=@as [] content-pane-position=187 google-fonts-background-color='rgb(255,255,255)' google-fonts-foreground-color='rgb(0,0,0)' language-filter-list=@as [] selected-category='7:1' selected-font='13' window-size=(900, 467) [org/gnome/font-manager/font-viewer] preview-font-size=16.0 [org/gnome/gedit/plugins/externaltools] font='Monospace 14' [org/gnome/libgnomekbd/indicator] font-size=12 and thats's the Pantheon desktop sorted! The Console The TTY consoles was a bit trickier, but the Arch wiki came through, as it so often does, and now everything is a reasonable size, even on first boot, thanks to an /etc/vconsole.conf of: FONT=ter-v28b The Most Important Thing But speaking of the terminal, easily my biggest accomplishment so far is that I've made a custom neofetch logo for Holo Shed OS: Since I'm no ASCII art guru, this was a good-sized project: There's a utility called jp2a that will convert an image to ASCII art But it does it with ANSI codes And neofetch (which hasn't been updated since 2021) doesn't work with ANSI codes Enter my own solution: jp2a2neo.py , a ridiculously simple script to bridge the gap between the two programs: starting with an image like: and then running the command: jp2a logo.png --color-depth=4 --width=48 | ./jp2a2neofetch.py > neofetch_logo.txt resulted in an output I could then paste directly into the neofetch executable , yielding the awesome result you see above. So yeah, I'm feeling pretty proud of myself.","title":"A Font of Text Configurations"},{"location":"dev-diary/03-most-important-thing/#a-font-of-text-configurations","text":"Holo Shed OS for the Win4 is going remarkably well. Having a physical keyboard and a \"native\" landscape display has made the work of developing a bespoke Linux distro way easier than it would have been on the Steam Deck.","title":"A Font of Text Configurations"},{"location":"dev-diary/03-most-important-thing/#old-man-eyes","text":"Of course, Linuxing on the Win4 does have its downsides in the form of a 6\" FHD display that makes the text show up way too small out of the box, at least for my aging eyeballs. X11, GTK/GNOME and Pantheon do all theoretically support \"HiDPI\" modes and scaling, but those Three Stooges get in each other's way more often than not. Instead, the most reliable solution I've found is grabbing Dconf Editor and just searching for any setting for \"font\" or \"size.\" Having an interactive tool for this has been ace, by the way, since you can preview (and revert) settings extremwely quickly. Here's a list of everything I changed (conveniently grabbed from the CLI by running dconf dump / : [ca/desrt/dconf-editor] saved-pathbar-path='/org/gnome/gedit/plugins/externaltools/font' window-height=443 window-width=894 [desktop/ibus/panel] custom-font='Sans 14' ; will probably bump this higher [io/elementary/files/file-chooser] window-size=(892, 450) [io/elementary/files/preferences] sidebar-width=191 window-size=(1000, 680) [io/elementary/terminal/settings] font='Monospace 14' natural-copy-paste=false prefer-dark-style=true theme='dark' [org/gnome/desktop/interface] cursor-size=36 document-font-name='Open Sans 16' font-name='Inter 12' monospace-font-name='SourceCodeVF 16' scaling-factor=uint32 1 text-scaling-factor=1.0 [org/gnome/desktop/wm/preferences] titlebar-font='Cantarell Bold 18' [org/gnome/font-manager] compare-background-color='rgb(255,255,255)' compare-foreground-color='rgb(0,0,0)' compare-list=@as [] content-pane-position=187 google-fonts-background-color='rgb(255,255,255)' google-fonts-foreground-color='rgb(0,0,0)' language-filter-list=@as [] selected-category='7:1' selected-font='13' window-size=(900, 467) [org/gnome/font-manager/font-viewer] preview-font-size=16.0 [org/gnome/gedit/plugins/externaltools] font='Monospace 14' [org/gnome/libgnomekbd/indicator] font-size=12 and thats's the Pantheon desktop sorted!","title":"Old Man Eyes"},{"location":"dev-diary/03-most-important-thing/#the-console","text":"The TTY consoles was a bit trickier, but the Arch wiki came through, as it so often does, and now everything is a reasonable size, even on first boot, thanks to an /etc/vconsole.conf of: FONT=ter-v28b","title":"The Console"},{"location":"dev-diary/03-most-important-thing/#the-most-important-thing","text":"But speaking of the terminal, easily my biggest accomplishment so far is that I've made a custom neofetch logo for Holo Shed OS: Since I'm no ASCII art guru, this was a good-sized project: There's a utility called jp2a that will convert an image to ASCII art But it does it with ANSI codes And neofetch (which hasn't been updated since 2021) doesn't work with ANSI codes Enter my own solution: jp2a2neo.py , a ridiculously simple script to bridge the gap between the two programs: starting with an image like: and then running the command: jp2a logo.png --color-depth=4 --width=48 | ./jp2a2neofetch.py > neofetch_logo.txt resulted in an output I could then paste directly into the neofetch executable , yielding the awesome result you see above. So yeah, I'm feeling pretty proud of myself.","title":"The Most Important Thing"},{"location":"dev-diary/04-holoshed-on-the-deck/","text":"Nixing it Up: Holo Shed on the Deck The \"Holo Shed\" experience on my GPD Win4 is going well\u2014so well that there's honestly not really much to write up. Frankly, it's not meaningfully different than Arch on my desktop, aside from the font settings and my input-remapper configuration. But this past week's surprise drop of the Steam Deck OLED afforded me a chance to revisit this project's original concept of customizing SteamOS into a more effective cyberdeck solution. By that I do not mean that I went out and bought a third console PC, I mean that in order to ship these new devices with HDR support, Valve finally pushed the long-awaited SteamOS 3.5 to Stable. This is easily the biggest change to the Deck's software since I got mine in September 2022, with a huge bump to the Linux kernel ( the fn keys on my Keychron K7 finally work like they're supposed to! ), badly-needed updates to modern versions of the installed Python and Git executables, and, most interestingly, a pre-configured /nix overlay partition. Now, I've never used NixOS before, but I sure have heard a lot of hype around the \"declarative\" package management system and how robust Nix's approach to software installation is. The details are beyond the scope of this project, and I strongly suspect I am not taking full advantage of Nix's declarative workflows so let me just give the tl;dr\u2014with SteamOS 3.5 you can now safely install system packages in a way that does not touch SteamOS' underlying read only filesystem and which should have no issues surviving software updates. This is in sharp contrast to rwfus , the overlay tool I'd been using up to this point, which, while also using an overlay to avoid messing with the base file system, could easily break your SteamOS if a package you manually installed conflicted with the version expected by SteamOS. So even though I had a pretty good setup at this point\u2014I had Sway launchable from Gaming Mode as a \"non-Steam app\" and an experimental version of OBS working that supported recording through Gaming Mode\u2014I had a few reasons to expect my rwfus overlay was going to seriously break with the OS upgrade, and rather than fix the broken pieces, I decided a better strategy would be to rebuild my \"Holo Shed\" Deck overlay from scratch. Step Negative One: Back up Everything I actually take a large amount of pride in my backup hygeine\u2014while I never got systemd timers working, I was really good about running a backup script every time I ran a software update (either Steam or overlaid pacman ). I thought about making full partition images as well\u2014thanks to me moving most of my Steam library to a separate data partition I'd created on my SSD, I actually had plenty of space to write a full disk image of my /home partition to my microSD\u2014but looking over my backups, I actually felt confident that I had all my important files already stored away, so I didn't bother. Step Zero: Re-image the Deck Valve has excellent docs for this , and the hardest part for me was finding an 8+ GB thumb drive (since my prior experience was that the recovery ISO isn't compatible with Ventoy \ud83d\ude21). My process\u2014which I had to be careful about, given that I had that giant data partition I did't want reformatted\u2014was as follows: Download the recovery ISO and burn it to a flash drive Boot to the recovery image Click the launcher to delete all user data (pretty sure this just completely wipes /home/deck ) Click the launcher to reinstall the OS. I really like that there's a little console that pops up in the background that tells you what's going on in terms of the partitions being deleted or rewritten. Once that completes, eject the drive and boot. Go through the setup and, in Gaming Mode settings (system tab), change the hostname. Then launch Desktop Mode. Open a console and set a password using the passwd command. Then enable SSH via: sudo systemctl enable sshd Verify that ssh is working via: ssh localhost It was at this point that I realized that, while I backed up all of my SSH user keys I didn't grab my host keys from /etc/ssh \ud83d\ude2d. This meant my next half-hour was spent ssh-copy-id -ing into all of my other machines and then removing old entries from known_hosts . 0/10\u2014Would not recommend. 1. Restore some backed up files. My .bashrc wasn't going to work until I had some extra pacakges installed, but I could go ahead and bring over my .vimrc , at least. Adding My Own Overlay So as I mentioned above, I prefer to keep my home folder with all of its user configurations and (in this case) Steam shenanigans separate from the bulk of my actual data , which I store on a separate partition on my machines' internal SSDs. I usually mount that partition as /main , but on SteamOS, the /main mount point can't be created because of the read-only file system\u2014I can't create even an empty directory at that location. I could mount my data as /mnt/main , and prior to SteamOS 3.5 I actually had it mounted at /home/deck/main , but I was feeling stubborn and determined, so I decided instead to ask myself, \"well, how does /nix exist?\" I found the answer to that question in this guide , written before SteamOS 3.5 entered preview, and I adapted their instructions for creating a bind-mount: Create a mount-point at /mnt/main , which is writeable (and preferrable to /run/media , at least to me) Add the partition to /etc/fstab (also writeable) In /etc/systemd/system create a main-directory.service (following the template of nix-directory.service ) and main.mount (following their template for nix.mount ) Instead of bothering with a third, ensure-symlinked-units-resolve.service , I instead added: [Install] WantedBy=sysinit.target to both of the files created in the previous step 1. Finally, I ran sudo systemctl daemon-reload and sudo systemctl enable --now for both main-directory and main.mount and made sure everything was working and would work automatically after a reboot by, well, rebooting. 1. With that done, I ran through my usual process of removing all of my home folders with symlinks to /main : for folder in Downloads Documents Music Pictures Videos do rmdir $folder && ln -s /main/$folder done At the end of the day, was it really worth it to be able to access my files from /main instead of /mnt/main , especially given that most of my directories were accessible via ~/$folder anyway? No, it was not, and if a future update breaks these services, I'm not going to fix them. Installing Nix It's weird to me that Valve would go to all the trouble of setting up the overlay partition and the bind-mount for Nix, but not actually ship the Nix package manager itself. I guess it could be a licensing issue? Or they really want to make sure that people installing things with Nix know what they're doing? In any case, I was honestly shocked at how easy this part was. You could follow the rest of that guide I linked in the previous section, but the Arch Wiki is actually really concise here: curl --proto '=https' --tlsv1.2 -sSfL https://nixos.org/nix/install -o nix-install.sh View the script before running it. Yes, that's definitely good practice and something I absolutely did. ./nix-install.sh --daemon Enable and start the daemon sudo sysytemctl enable --now nix-daemon Note For some reason, my nix-daemon still needs to be restarted after every reboot. What essentials do I actually need to install? Prior to 3.5, the software that shipped with SteamOS was so old that I had to install essential dependencies in a virtual environment. But 3.5.5 ships with: Python 3.11.3, which is new enough for me (Arch doesn't even have a non-AUR package for 3.12 as of this writing) Git 2.41.0 is only one minor version behind my Arch system Rsync 3.2.7 is up-to-date! Vim 9.0 ( RIP Bram Moolenaar ) tmux came pre-installed, unlike before (no Screen, but I really should be trying to use tmux anyway). So that left relatively few essential pieces of command-line software: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nix-channel --update nix-env -iA nixpkgs.lolcat nixpkgs.pipx nixpkgs.glances nixpkgs.asciiquarium nixpkgs.sl nixpkgs.neofetch And with pipx installed I could then add my other essentials pipx install enderchest gsb pipx --ensure-path With lolcat back on my system, I could now bring over my .bashrc , but I actually ended up doing a line-by-line merge with the fresh copy Valve included, since a lot of the workarounds I'd added to my script previously were no longer needed. Rebuilding my system Steam did a great job of restoring all my Steam save files (with the exception of Minecraft Legends , which is weird, because I thought that was a Microsoft cloud save anyway) and controller layouts, even for my non-Steam games, but because I (intentionally) only backed up my flatpak data and not the executables (or permisison overrides themselves) I then had quite a bit of work installing flatpaks, configuring permissions, fixing broken symlinks ( ~/main \u2192 /mnt/main ) and creating launchers in Steam. But that's honestly fine, because I honestly neither needed nor wanted \"non-Steam game\" launchers for all the software I had before\u2014through months of use I'd found it to be a much better experience to launch Firefox, GIMP or Avidemux through Sway than as a \"game,\" confined to their own stand-alone session. Time for Tiling With my flatpaks installed, it was now time to grab the software that could only come from Nix. I decided to start with the kitty terminal: nix-env -iA nixpkgs.kitty and immediately ran into the snag that it couldn't initialize OpenGL. Luckily, this was covered in the Arch wiki : nix-channel --add https://github.com/guibou/nixGL/archive/main.tar.gz nixgl nix-channel --update nix-env -iA nixgl.auto.nixGLDefault and then I could launch kitty via: nixGL kitty With that working, I started on Hyprland , which I've been playing around with on my GPD Win4 and just find a little snazzier out-of-the-box than Sway. nix-env -iA nixpkgs.hyprland nixpkgs.hyprpaper nixpkgs.imv nixpkgs.ironbar nixpkgs.mako nixpkgs.thunar nixpkgs.tofi and, once installed, I switched over to a TTY (external keyboard required) and launched Hyprland via: gamescope nixGL Hyprland Since the Steam Deck uses a native portrait display, that meant that out of the box, Hyprland would have launched sideways without running through gamescope. Using gamescope for my testing had the further advantage of simulating what I would be doing in the end, which is running my WM through Gaming Mode. With these tests completed, I then created Steam launchers and booted to gaming mode where... nothing worked. The \"games\" crashed immediately, and the logs told me nothing. Miraculously, I found this blog post which outlined both the exact cause of my issue and the exact solution : # Steam resets the PATH, so source nix again to restore it source /etc/profile.d/nix.sh By adding the above to a launch script, I could now launch Hyprland, kitty or any other Nix-installed application from Gaming Mode. Success!! Guacamolie, if we ever meet in real life, I owe you a beverage of your choosing. Tips for Tiling in Gaming Mode The whole reason why I wanted to get a tiling WM working in Gaming Mode is not only so I can easily jump back-and-forth between a web browser, terminal or video editing app and an actual game, but because Steam Input + keyboard-heavy Tiling WMs is an overpowered combination. On my Win4, I've been using input-remapper to allow me to use desktop controls without using GPD's built-in keybinds, but Steam Input is just more convenient to configure and use from SteamOS. My general strategy is to do all of my configurating in Steam Input and target an application or game's default keybinds, but in the case of Hyprland I needed to make a few alterations due to Steam for some reason not binding to the Super (Win) key. I also needed to tweak the monitor settings, as when set to auto, the scaling of Hyprland in Gaming Mode is ridiculously large. I'll eventually put all my configurations into a Github repo, but for right now, here are the essential parts of my hyprland.conf : # to do: specify the monitor monitor=,1280x800,auto,1 exec-once = ironbar & hyprpaper $mainMod = Alt_L To get a sense of the desktop-environment-on-gaming-mode experience, here's a screenshot of my Hyprland desktop, taken directly with Steam's screenshotter: It's not the swankiest thing ever\u2014Hyprland and its suggested software components give you an overwhelmingly large amount to customize\u2014but I've gotten it into a state where it's usable and fun to play around with. And after all, that's what I wanted most from my \"Holo Shed\" experience.","title":"Nixing it Up: Holo Shed on the Deck"},{"location":"dev-diary/04-holoshed-on-the-deck/#nixing-it-up-holo-shed-on-the-deck","text":"The \"Holo Shed\" experience on my GPD Win4 is going well\u2014so well that there's honestly not really much to write up. Frankly, it's not meaningfully different than Arch on my desktop, aside from the font settings and my input-remapper configuration. But this past week's surprise drop of the Steam Deck OLED afforded me a chance to revisit this project's original concept of customizing SteamOS into a more effective cyberdeck solution. By that I do not mean that I went out and bought a third console PC, I mean that in order to ship these new devices with HDR support, Valve finally pushed the long-awaited SteamOS 3.5 to Stable. This is easily the biggest change to the Deck's software since I got mine in September 2022, with a huge bump to the Linux kernel ( the fn keys on my Keychron K7 finally work like they're supposed to! ), badly-needed updates to modern versions of the installed Python and Git executables, and, most interestingly, a pre-configured /nix overlay partition. Now, I've never used NixOS before, but I sure have heard a lot of hype around the \"declarative\" package management system and how robust Nix's approach to software installation is. The details are beyond the scope of this project, and I strongly suspect I am not taking full advantage of Nix's declarative workflows so let me just give the tl;dr\u2014with SteamOS 3.5 you can now safely install system packages in a way that does not touch SteamOS' underlying read only filesystem and which should have no issues surviving software updates. This is in sharp contrast to rwfus , the overlay tool I'd been using up to this point, which, while also using an overlay to avoid messing with the base file system, could easily break your SteamOS if a package you manually installed conflicted with the version expected by SteamOS. So even though I had a pretty good setup at this point\u2014I had Sway launchable from Gaming Mode as a \"non-Steam app\" and an experimental version of OBS working that supported recording through Gaming Mode\u2014I had a few reasons to expect my rwfus overlay was going to seriously break with the OS upgrade, and rather than fix the broken pieces, I decided a better strategy would be to rebuild my \"Holo Shed\" Deck overlay from scratch.","title":"Nixing it Up: Holo Shed on the Deck"},{"location":"dev-diary/04-holoshed-on-the-deck/#step-negative-one-back-up-everything","text":"I actually take a large amount of pride in my backup hygeine\u2014while I never got systemd timers working, I was really good about running a backup script every time I ran a software update (either Steam or overlaid pacman ). I thought about making full partition images as well\u2014thanks to me moving most of my Steam library to a separate data partition I'd created on my SSD, I actually had plenty of space to write a full disk image of my /home partition to my microSD\u2014but looking over my backups, I actually felt confident that I had all my important files already stored away, so I didn't bother.","title":"Step Negative One: Back up Everything"},{"location":"dev-diary/04-holoshed-on-the-deck/#step-zero-re-image-the-deck","text":"Valve has excellent docs for this , and the hardest part for me was finding an 8+ GB thumb drive (since my prior experience was that the recovery ISO isn't compatible with Ventoy \ud83d\ude21). My process\u2014which I had to be careful about, given that I had that giant data partition I did't want reformatted\u2014was as follows: Download the recovery ISO and burn it to a flash drive Boot to the recovery image Click the launcher to delete all user data (pretty sure this just completely wipes /home/deck ) Click the launcher to reinstall the OS. I really like that there's a little console that pops up in the background that tells you what's going on in terms of the partitions being deleted or rewritten. Once that completes, eject the drive and boot. Go through the setup and, in Gaming Mode settings (system tab), change the hostname. Then launch Desktop Mode. Open a console and set a password using the passwd command. Then enable SSH via: sudo systemctl enable sshd Verify that ssh is working via: ssh localhost It was at this point that I realized that, while I backed up all of my SSH user keys I didn't grab my host keys from /etc/ssh \ud83d\ude2d. This meant my next half-hour was spent ssh-copy-id -ing into all of my other machines and then removing old entries from known_hosts . 0/10\u2014Would not recommend. 1. Restore some backed up files. My .bashrc wasn't going to work until I had some extra pacakges installed, but I could go ahead and bring over my .vimrc , at least.","title":"Step Zero: Re-image the Deck"},{"location":"dev-diary/04-holoshed-on-the-deck/#adding-my-own-overlay","text":"So as I mentioned above, I prefer to keep my home folder with all of its user configurations and (in this case) Steam shenanigans separate from the bulk of my actual data , which I store on a separate partition on my machines' internal SSDs. I usually mount that partition as /main , but on SteamOS, the /main mount point can't be created because of the read-only file system\u2014I can't create even an empty directory at that location. I could mount my data as /mnt/main , and prior to SteamOS 3.5 I actually had it mounted at /home/deck/main , but I was feeling stubborn and determined, so I decided instead to ask myself, \"well, how does /nix exist?\" I found the answer to that question in this guide , written before SteamOS 3.5 entered preview, and I adapted their instructions for creating a bind-mount: Create a mount-point at /mnt/main , which is writeable (and preferrable to /run/media , at least to me) Add the partition to /etc/fstab (also writeable) In /etc/systemd/system create a main-directory.service (following the template of nix-directory.service ) and main.mount (following their template for nix.mount ) Instead of bothering with a third, ensure-symlinked-units-resolve.service , I instead added: [Install] WantedBy=sysinit.target to both of the files created in the previous step 1. Finally, I ran sudo systemctl daemon-reload and sudo systemctl enable --now for both main-directory and main.mount and made sure everything was working and would work automatically after a reboot by, well, rebooting. 1. With that done, I ran through my usual process of removing all of my home folders with symlinks to /main : for folder in Downloads Documents Music Pictures Videos do rmdir $folder && ln -s /main/$folder done At the end of the day, was it really worth it to be able to access my files from /main instead of /mnt/main , especially given that most of my directories were accessible via ~/$folder anyway? No, it was not, and if a future update breaks these services, I'm not going to fix them.","title":"Adding My Own Overlay"},{"location":"dev-diary/04-holoshed-on-the-deck/#installing-nix","text":"It's weird to me that Valve would go to all the trouble of setting up the overlay partition and the bind-mount for Nix, but not actually ship the Nix package manager itself. I guess it could be a licensing issue? Or they really want to make sure that people installing things with Nix know what they're doing? In any case, I was honestly shocked at how easy this part was. You could follow the rest of that guide I linked in the previous section, but the Arch Wiki is actually really concise here: curl --proto '=https' --tlsv1.2 -sSfL https://nixos.org/nix/install -o nix-install.sh View the script before running it. Yes, that's definitely good practice and something I absolutely did. ./nix-install.sh --daemon Enable and start the daemon sudo sysytemctl enable --now nix-daemon Note For some reason, my nix-daemon still needs to be restarted after every reboot.","title":"Installing Nix"},{"location":"dev-diary/04-holoshed-on-the-deck/#what-essentials-do-i-actually-need-to-install","text":"Prior to 3.5, the software that shipped with SteamOS was so old that I had to install essential dependencies in a virtual environment. But 3.5.5 ships with: Python 3.11.3, which is new enough for me (Arch doesn't even have a non-AUR package for 3.12 as of this writing) Git 2.41.0 is only one minor version behind my Arch system Rsync 3.2.7 is up-to-date! Vim 9.0 ( RIP Bram Moolenaar ) tmux came pre-installed, unlike before (no Screen, but I really should be trying to use tmux anyway). So that left relatively few essential pieces of command-line software: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nix-channel --update nix-env -iA nixpkgs.lolcat nixpkgs.pipx nixpkgs.glances nixpkgs.asciiquarium nixpkgs.sl nixpkgs.neofetch And with pipx installed I could then add my other essentials pipx install enderchest gsb pipx --ensure-path With lolcat back on my system, I could now bring over my .bashrc , but I actually ended up doing a line-by-line merge with the fresh copy Valve included, since a lot of the workarounds I'd added to my script previously were no longer needed.","title":"What essentials do I actually need to install?"},{"location":"dev-diary/04-holoshed-on-the-deck/#rebuilding-my-system","text":"Steam did a great job of restoring all my Steam save files (with the exception of Minecraft Legends , which is weird, because I thought that was a Microsoft cloud save anyway) and controller layouts, even for my non-Steam games, but because I (intentionally) only backed up my flatpak data and not the executables (or permisison overrides themselves) I then had quite a bit of work installing flatpaks, configuring permissions, fixing broken symlinks ( ~/main \u2192 /mnt/main ) and creating launchers in Steam. But that's honestly fine, because I honestly neither needed nor wanted \"non-Steam game\" launchers for all the software I had before\u2014through months of use I'd found it to be a much better experience to launch Firefox, GIMP or Avidemux through Sway than as a \"game,\" confined to their own stand-alone session.","title":"Rebuilding my system"},{"location":"dev-diary/04-holoshed-on-the-deck/#time-for-tiling","text":"With my flatpaks installed, it was now time to grab the software that could only come from Nix. I decided to start with the kitty terminal: nix-env -iA nixpkgs.kitty and immediately ran into the snag that it couldn't initialize OpenGL. Luckily, this was covered in the Arch wiki : nix-channel --add https://github.com/guibou/nixGL/archive/main.tar.gz nixgl nix-channel --update nix-env -iA nixgl.auto.nixGLDefault and then I could launch kitty via: nixGL kitty With that working, I started on Hyprland , which I've been playing around with on my GPD Win4 and just find a little snazzier out-of-the-box than Sway. nix-env -iA nixpkgs.hyprland nixpkgs.hyprpaper nixpkgs.imv nixpkgs.ironbar nixpkgs.mako nixpkgs.thunar nixpkgs.tofi and, once installed, I switched over to a TTY (external keyboard required) and launched Hyprland via: gamescope nixGL Hyprland Since the Steam Deck uses a native portrait display, that meant that out of the box, Hyprland would have launched sideways without running through gamescope. Using gamescope for my testing had the further advantage of simulating what I would be doing in the end, which is running my WM through Gaming Mode. With these tests completed, I then created Steam launchers and booted to gaming mode where... nothing worked. The \"games\" crashed immediately, and the logs told me nothing. Miraculously, I found this blog post which outlined both the exact cause of my issue and the exact solution : # Steam resets the PATH, so source nix again to restore it source /etc/profile.d/nix.sh By adding the above to a launch script, I could now launch Hyprland, kitty or any other Nix-installed application from Gaming Mode. Success!! Guacamolie, if we ever meet in real life, I owe you a beverage of your choosing.","title":"Time for Tiling"},{"location":"dev-diary/04-holoshed-on-the-deck/#tips-for-tiling-in-gaming-mode","text":"The whole reason why I wanted to get a tiling WM working in Gaming Mode is not only so I can easily jump back-and-forth between a web browser, terminal or video editing app and an actual game, but because Steam Input + keyboard-heavy Tiling WMs is an overpowered combination. On my Win4, I've been using input-remapper to allow me to use desktop controls without using GPD's built-in keybinds, but Steam Input is just more convenient to configure and use from SteamOS. My general strategy is to do all of my configurating in Steam Input and target an application or game's default keybinds, but in the case of Hyprland I needed to make a few alterations due to Steam for some reason not binding to the Super (Win) key. I also needed to tweak the monitor settings, as when set to auto, the scaling of Hyprland in Gaming Mode is ridiculously large. I'll eventually put all my configurations into a Github repo, but for right now, here are the essential parts of my hyprland.conf : # to do: specify the monitor monitor=,1280x800,auto,1 exec-once = ironbar & hyprpaper $mainMod = Alt_L To get a sense of the desktop-environment-on-gaming-mode experience, here's a screenshot of my Hyprland desktop, taken directly with Steam's screenshotter: It's not the swankiest thing ever\u2014Hyprland and its suggested software components give you an overwhelmingly large amount to customize\u2014but I've gotten it into a state where it's usable and fun to play around with. And after all, that's what I wanted most from my \"Holo Shed\" experience.","title":"Tips for Tiling in Gaming Mode"}]}